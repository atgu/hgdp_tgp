axis.title = element_text(size = 10),
legend.title = element_text(size = 10)) +
guides(shape=guide_legend(override.aes=list(size=2)))
ggplot(plot_merged, aes(x = Distance, y = F_st, linetype=project, shape = project)) +
geom_point(aes(color = same_GR), size = 1) +
geom_smooth(method=lm) +
theme_classic() +
labs(shape = "Projects", color = "Within the same region")  +
ylab(bquote(F[ST])) +
scale_linetype_manual(values=c(1,2,10), name="Projects")+
theme(
plot.margin = unit(c(5,3,1,1),"cm"),
axis.title = element_text(size = 10),
legend.title = element_text(size = 10)) +
guides(shape=guide_legend(override.aes=list(size=2)))
p <- ggplot(plot_merged, aes(x = Distance, y = F_st, linetype=project, shape = project)) +
geom_point(aes(color = same_GR), size = 1) +
geom_smooth(method=lm) +
theme_classic() +
labs(shape = "Projects", color = "Within the same region")  +
ylab(bquote(F[ST])) +
scale_linetype_manual(values=c(1,2,10), name="Projects")+
theme(
plot.margin = unit(c(5,3,1,1),"cm"),
axis.title = element_text(size = 10),
legend.title = element_text(size = 10)) +
guides(shape=guide_legend(override.aes=list(size=2)))
ggsave('Fst_vs_geographical_distance.pdf', p, width=7, height=3)
ggsave('Fst_vs_geographical_distance.png', p, width=7, height=3)
p <- ggplot(plot_merged, aes(x = Distance, y = F_st, linetype=project, shape = project)) +
geom_point(aes(color = same_GR), size = 1) +
geom_smooth(method=lm) +
theme_classic() +
labs(shape = "Projects", color = "Within the same region")  +
ylab(bquote(F[ST])) +
scale_linetype_manual(values=c(1,2,10), name="Projects")+
theme(
plot.margin = unit(c(5,3,1,1),"cm"),
axis.title = element_text(size = 10),
legend.title = element_text(size = 10)) +
guides(shape=guide_legend(override.aes=list(size=2)))
ggsave('Fst_vs_geographical_distance.pdf', p, width=7, height=5)
ggsave('Fst_vs_geographical_distance.png', p, width=7, height=5)
p <- ggplot(plot_merged, aes(x = Distance, y = F_st, linetype=project, shape = project)) +
geom_point(aes(color = same_GR), size = 1) +
geom_smooth(method=lm) +
theme_classic() +
labs(shape = "Projects", color = "Within the same region")  +
ylab(bquote(F[ST])) +
scale_linetype_manual(values=c(1,2,10), name="Projects")+
theme(
plot.margin = unit(c(5.5,3,1,1),"cm"),
axis.title = element_text(size = 10),
legend.title = element_text(size = 10)) +
guides(shape=guide_legend(override.aes=list(size=2)))
ggsave('Fst_vs_geographical_distance.pdf', p, width=7, height=5)
ggsave('Fst_vs_geographical_distance.png', p, width=7, height=5)
p <- ggplot(plot_merged, aes(x = Distance, y = F_st, linetype=project, shape = project)) +
geom_point(aes(color = same_GR), size = 1) +
geom_smooth(method=lm) +
theme_classic() +
labs(shape = "Projects", color = "Within the same region")  +
ylab(bquote(F[ST])) +
scale_linetype_manual(values=c(1,2,10), name="Projects")+
theme(
plot.margin = unit(c(5.2,3,1,1),"cm"),
axis.title = element_text(size = 10),
legend.title = element_text(size = 10)) +
guides(shape=guide_legend(override.aes=list(size=2)))
ggsave('Fst_vs_geographical_distance.pdf', p, width=7, height=5)
ggsave('Fst_vs_geographical_distance.png', p, width=7, height=5)
p <- ggplot(plot_merged, aes(x = Distance, y = F_st, linetype=project, shape = project)) +
geom_point(aes(color = same_GR), size = 1) +
geom_smooth(method=lm) +
theme_classic() +
labs(shape = "Projects", color = "Within the same region")  +
ylab(bquote(F[ST])) +
scale_linetype_manual(values=c(1,2,10), name="Projects")+
theme(
plot.margin = unit(c(5.3,3,1,1),"cm"),
axis.title = element_text(size = 10),
legend.title = element_text(size = 10)) +
guides(shape=guide_legend(override.aes=list(size=2)))
ggsave('Fst_vs_geographical_distance.pdf', p, width=7, height=5)
ggsave('Fst_vs_geographical_distance.png', p, width=7, height=5)
p <- ggplot(plot_merged, aes(x = Distance, y = F_st, linetype=project, shape = project)) +
geom_point(aes(color = same_GR), size = 1) +
geom_smooth(method=lm) +
theme_classic() +
labs(shape = "Projects", color = "Within the same region")  +
ylab(bquote(F[ST])) +
scale_linetype_manual(values=c(1,2,10), name="Projects")+
theme(
plot.margin = unit(c(5.4,3,1,1),"cm"),
axis.title = element_text(size = 10),
legend.title = element_text(size = 10)) +
guides(shape=guide_legend(override.aes=list(size=2)))
ggsave('Fst_vs_geographical_distance.pdf', p, width=7, height=5)
ggsave('Fst_vs_geographical_distance.png', p, width=7, height=5)
p <- ggplot(plot_merged, aes(x = Distance, y = F_st, linetype=project, shape = project)) +
geom_point(aes(color = same_GR), size = 1) +
geom_smooth(method=lm) +
theme_classic() +
labs(shape = "Projects", color = "Within the same region")  +
ylab(bquote(F[ST])) +
scale_linetype_manual(values=c(1,2,10), name="Projects")+
theme(
plot.margin = unit(c(5.6,3,1,1),"cm"),
axis.title = element_text(size = 10),
legend.title = element_text(size = 10)) +
guides(shape=guide_legend(override.aes=list(size=2)))
ggsave('Fst_vs_geographical_distance.pdf', p, width=7, height=5)
ggsave('Fst_vs_geographical_distance.png', p, width=7, height=5)
p <- ggplot(plot_merged, aes(x = Distance, y = F_st, linetype=project, shape = project)) +
geom_point(aes(color = same_GR), size = 1) +
geom_smooth(method=lm) +
theme_classic() +
labs(shape = "Projects", color = "Within the same region")  +
ylab(bquote(F[ST])) +
scale_linetype_manual(values=c(1,2,10), name="Projects")+
theme(
plot.margin = unit(c(5.8,3,1,1),"cm"),
axis.title = element_text(size = 10),
legend.title = element_text(size = 10)) +
guides(shape=guide_legend(override.aes=list(size=2)))
ggsave('Fst_vs_geographical_distance.pdf', p, width=7, height=5)
ggsave('Fst_vs_geographical_distance.png', p, width=7, height=5)
p <- ggplot(plot_merged, aes(x = Distance, y = F_st, linetype=project, shape = project)) +
geom_point(aes(color = same_GR), size = 1) +
geom_smooth(method=lm) +
theme_classic() +
labs(shape = "Projects", color = "Within the same region")  +
ylab(bquote(F[ST])) +
scale_linetype_manual(values=c(1,2,10), name="Projects")+
theme(
plot.margin = unit(c(5.8,3,1,1),"cm"),
axis.title = element_text(size = 8),
legend.title = element_text(size = 8)) +
guides(shape=guide_legend(override.aes=list(size=2)))
ggsave('Fst_vs_geographical_distance.pdf', p, width=7, height=5)
ggsave('Fst_vs_geographical_distance.png', p, width=7, height=5)
p <- ggplot(plot_merged, aes(x = Distance, y = F_st, linetype=project, shape = project)) +
geom_point(aes(color = same_GR), size = 1) +
geom_smooth(method=lm) +
theme_classic() +
labs(shape = "Projects", color = "Within the same region")  +
ylab(bquote(F[ST])) +
scale_linetype_manual(values=c(1,2,10), name="Projects")+
theme(
plot.margin = unit(c(5.8,3,1,1),"cm"),
axis.title = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 6)) +
guides(shape=guide_legend(override.aes=list(size=2)))
ggsave('Fst_vs_geographical_distance.pdf', p, width=7, height=5)
ggsave('Fst_vs_geographical_distance.png', p, width=7, height=5)
p <- ggplot(plot_merged, aes(x = Distance, y = F_st, linetype=project, shape = project)) +
geom_point(aes(color = same_GR), size = 1) +
geom_smooth(method=lm) +
theme_classic() +
labs(shape = "Projects", color = "Within the same region")  +
ylab(bquote(F[ST])) +
scale_linetype_manual(values=c(1,2,10), name="Projects")+
theme(
plot.margin = unit(c(5.8,3,1,1),"cm"),
axis.title = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 7.5)) +
guides(shape=guide_legend(override.aes=list(size=2)))
ggsave('Fst_vs_geographical_distance.pdf', p, width=7, height=5)
ggsave('Fst_vs_geographical_distance.png', p, width=7, height=5)
p <- ggplot(plot_merged, aes(x = Distance, y = F_st, linetype=project, shape = project)) +
geom_point(aes(color = same_GR), size = 1) +
geom_smooth(method=lm) +
theme_classic() +
labs(shape = "Projects", color = "Within the same region")  +
ylab(bquote(F[ST])) +
scale_linetype_manual(values=c(1,2,10), name="Projects")+
theme(
plot.margin = unit(c(5.8,3,1,1),"cm"),
axis.title = element_text(size = 8),
legend.title = element_text(size = 9),
legend.text = element_text(size = 7.5)) +
guides(shape=guide_legend(override.aes=list(size=2)))
ggsave('Fst_vs_geographical_distance.pdf', p, width=7, height=5)
ggsave('Fst_vs_geographical_distance.png', p, width=7, height=5)
p <- ggplot(plot_merged, aes(x = Distance, y = F_st, linetype=project, shape = project)) +
geom_point(aes(color = same_GR), size = 1) +
geom_smooth(method=lm) +
theme_classic() +
labs(shape = "Projects", color = "Within the same region")  +
ylab(bquote(F[ST])) +
scale_linetype_manual(values=c(1,2,10), name="Projects")+
theme(
plot.margin = unit(c(5.8,3,1,1),"cm"),
axis.title = element_text(size = 8),
legend.title = element_text(size = 9),
legend.text = element_text(size = 7.5)) +
guides(
shape=guide_legend(override.aes=list(size=2)),
color=guide_legend(override.aes=list(size=2)))
ggsave('Fst_vs_geographical_distance.pdf', p, width=7, height=5)
ggsave('Fst_vs_geographical_distance.png', p, width=7, height=5)
p <- ggplot(plot_merged, aes(x = Distance, y = F_st, linetype=project, shape = project)) +
geom_point(aes(color = same_GR), size = 1) +
geom_smooth(method=lm) +
theme_classic() +
labs(shape = "Projects", color = "Within the same region")  +
ylab(bquote(F[ST])) +
scale_linetype_manual(values=c(1,2,10), name="Projects")+
theme(
plot.margin = unit(c(5.8,3,1,1),"cm"),
axis.title = element_text(size = 8),
legend.title = element_text(size = 9),
legend.text = element_text(size = 7.5)) +
guides(
shape=guide_legend(override.aes=list(size=2)),
color=guide_legend(override.aes=list(size=1.8)))
ggsave('Fst_vs_geographical_distance.pdf', p, width=7, height=5)
ggsave('Fst_vs_geographical_distance.png', p, width=7, height=5)
# read-in metadata with longitude and latitude coordinates for each population
hgdp_tgp_coor <- read.delim('~/Desktop/Broad/alicia/HGDP_TGP/hgdp_tgp/gnomad_meta_v1.tsv', header=T, sep='\t') %>% select(hgdp_tgp_meta.Population, hgdp_tgp_meta.Genetic.region, hgdp_tgp_meta.Latitude, hgdp_tgp_meta.Longitude, project_meta.title)
# since the samples within each population have the same coordinates, only keep one for each
hgdp_tgp_coor <- unique(hgdp_tgp_coor)
# create a list of population pairs to calculate the geographical distance between them - 3003 pairs from 78 populations
pop_pair <- strsplit(combn(hgdp_tgp_coor$hgdp_tgp_meta.Population, 2, FUN=paste, collapse=" "), " ") # took 2min
# create an empty list for results
final_list <- list()
# iterate through the population pairs
for (i in 1:length(pop_pair)) {
long1 <- hgdp_tgp_coor$hgdp_tgp_meta.Longitude[hgdp_tgp_coor$hgdp_tgp_meta.Population == pop_pair[[i]][1]] # long coor of first population
lat1 <- hgdp_tgp_coor$hgdp_tgp_meta.Latitude[hgdp_tgp_coor$hgdp_tgp_meta.Population == pop_pair[[i]][1]] # lat coor of first population
long2 <- hgdp_tgp_coor$hgdp_tgp_meta.Longitude[hgdp_tgp_coor$hgdp_tgp_meta.Population == pop_pair[[i]][2]] # long coor of second population
lat2 <- hgdp_tgp_coor$hgdp_tgp_meta.Latitude[hgdp_tgp_coor$hgdp_tgp_meta.Population == pop_pair[[i]][2]] # lat coor of second population
# calculate distance between the population pairs using the longitude and latitude coordinates
dist_calc <- distHaversine(c(long1, lat1), c(long2, lat2))
# to account for order - if pop1 and pop2 order in the pair list is flipped as compared to the coordinate table
if (dist_calc == 0) { # if the order doesn't match, then the distance will be set to 0
dist_calc2 <- distHaversine(c(long2, lat2), c(long1, lat1)) # so flip the values and calculate distance between the populations again
# temporary list to hold the population names and the distance calculated - for organizational purposes
tmp_list <- list(pop1=pop_pair[[i]][2], pop2=pop_pair[[i]][1], distance=dist_calc2)
# add temporary list to final list
final_list[[paste0(pop_pair[[i]][2], "-" ,pop_pair[[i]][1])]] <- tmp_list
} else { # if population order is correct:
# temporary list to hold the population names and the distance calculated - for organizational purposes
tmp_list <- list(pop1=pop_pair[[i]][1], pop2=pop_pair[[i]][2], distance=dist_calc)
# add temporary list to final list
final_list[[paste0(pop_pair[[i]][1], "-" ,pop_pair[[i]][2])]] <- tmp_list
}
}
# convert final distance list into a data frame
final_df <- bind_rows(final_list)
# read-in file with fst values
ds <- read.table('~/Desktop/Broad/alicia/HGDP_TGP/fst_and_f2/mean_fst.txt')
colnames(ds) <- c("pop1","pop2", "F_st") # make the column names consistent across the two data sets
# sort population names to make sure we don't run into a problem while merging the tables
# the two population columns have different orders in the two data frames
final_df$pop_min <- pmin(final_df$pop1, final_df$pop2)
final_df$pop_max <- pmax(final_df$pop1, final_df$pop2)
ds$pop_min <- pmin(ds$pop1, ds$pop2)
ds$pop_max <- pmax(ds$pop1, ds$pop2)
# merge tables for plotting
merged_ds <- merge(ds, final_df, by = c("pop_min","pop_max"))
# only select the desired columns
plot_ds <- merged_ds %>% select(pop_min, pop_max, F_st, distance) %>% rename(pop1 = pop_min, pop2 = pop_max, Distance = distance)
# Balochi & Brahui, and Palestinian & Druze have geographical distance of 0 because they've got the same coordinates - located close/on top of each other
# color and shape annotations for plot
plot_annot <- hgdp_tgp_coor %>% select(hgdp_tgp_meta.Population, hgdp_tgp_meta.Genetic.region, project_meta.title)
# merge the dataset with the annotation dataframe
# first join for pop1, then pop2, then rename the added columns
plot_merged <-  left_join(plot_ds, plot_annot, by=c("pop1" = "hgdp_tgp_meta.Population")) %>% left_join(plot_annot, by=c("pop2" = "hgdp_tgp_meta.Population")) %>% rename(pop1_GR = hgdp_tgp_meta.Genetic.region.x, pop1_Project = project_meta.title.x, pop2_GR = hgdp_tgp_meta.Genetic.region.y, pop2_Project = project_meta.title.y)
# set a True or False column for coloring
plot_merged$same_GR <- ifelse(plot_merged$pop1_GR == plot_merged$pop2_GR, 'Yes', 'No')
plot_merged$project <- ifelse(plot_merged$pop1_Project == plot_merged$pop2_Project, plot_merged$pop1_Project, 'Different Projects')
p <- ggplot(plot_merged, aes(x = Distance, y = F_st, linetype=project, shape = project)) +
geom_point(aes(color = same_GR), size = 1) +
geom_smooth(method=lm) +
theme_classic() +
labs(shape = "Projects", color = "Within the same region")  +
ylab(bquote(F[ST])) +
scale_linetype_manual(values=c(1,2,10), name="Projects")+
theme(
plot.margin = unit(c(5.8,3,1,1),"cm"),
axis.title = element_text(size = 8),
legend.title = element_text(size = 9),
legend.text = element_text(size = 7.5)) +
guides(
shape=guide_legend(override.aes=list(size=2)),
color=guide_legend(override.aes=list(size=1.8)))
ggsave('Fst_vs_geographical_distance.pdf', p, width=7, height=5)
ggsave('Fst_vs_geographical_distance.png', p, width=7, height=5)
p <- ggplot(plot_merged, aes(x = Distance, y = F_st, linetype=project, shape = project)) +
geom_point(aes(color = same_GR), size = 1) +
geom_smooth(method=lm) +
theme_classic() +
labs(shape = "Projects", color = "Within the same region")  +
ylab(bquote(F[ST])) +
scale_linetype_manual(values=c(1,2,10), name="Projects")+
theme(
plot.margin = unit(c(5.8,3,1,1),"cm"),
axis.title = element_text(size = 9),
legend.title = element_text(size = 9),
legend.text = element_text(size = 7.5)) +
guides(
shape=guide_legend(override.aes=list(size=2)),
color=guide_legend(override.aes=list(size=1.8)))
ggsave('Fst_vs_geographical_distance.pdf', p, width=7, height=5)
ggsave('Fst_vs_geographical_distance.png', p, width=7, height=5)
knitr::opts_chunk$set(echo = TRUE)
library(pheatmap)
library(dplyr)
library(RColorBrewer)
library(geosphere)
library(ggplot2)
hgdp_tgp_unfil <- read.delim('~/Desktop/Broad/alicia/HGDP_TGP/hgdp_tgp/gnomad_meta_v1.tsv', header=T, sep='\t') %>% select(s, project_meta.title, starts_with('hgdp_tgp_meta'))
# s
# some sample IDs have 'v3.1::' prefix as done in gnomAD so stripping that in order to match correctly with the pc score files
hgdp_tgp_unfil$s <- gsub('v3.1::', '', hgdp_tgp_unfil$s)
ds <- read.table('~/Desktop/Broad/alicia/HGDP_TGP/fst_and_f2/mean_fst.txt')
knitr::opts_chunk$set(echo = TRUE)
library(pheatmap)
library(grid)
library(reshape2)
library(dplyr)
ds <- read.csv(file = '~/Desktop/Broad/alicia/HGDP_TGP/fst_and_f2/doubleton_count.csv', sep = "\t") # 5707131 rows × 3 columns
knitr::opts_chunk$set(echo = TRUE)
# import needed libraries
library(tidyverse)
library(RColorBrewer)
library(plotly)
library(cowplot)
library(grid)
library(gridExtra)
outlier_status <- 'with_outliers'
region <- 'global'
region_pc_scores <- read.table(gzfile(paste0('pca/', outlier_status, '/scores/', region, '_scores_', outlier_status, '.txt.bgz')), header=T)
outlier_status <- 'with_outliers'
region <- 'global'
region_pc_scores <- read.table(gzfile(paste0('pca/', outlier_status, '/scores/', region, '_scores_', outlier_status, '.txt.bgz')), header=T)
knitr::opts_chunk$set(echo = TRUE)
# import needed libraries
library(tidyverse)
library(RColorBrewer)
library(plotly)
library(cowplot)
library(grid)
library(gridExtra)
outlier_status <- 'with_outliers'
region <- 'GLOBAL'
region_pc_scores <- read.table(gzfile(paste0('pca/', outlier_status, '/scores/', region, '_scores_', outlier_status, '.txt.bgz')), header=T)
outlier_status <- 'with_outliers'
region <- 'GLOBAL'
region_pc_scores <- read.table(gzfile('pca/with_outliers/scores/GLOBAL_scores_with_outliers.txt.bgz'), header=T)
setwd("~/Desktop/Broad/alicia/HGDP_TGP/hgdp_tgp")
outlier_status <- 'with_outliers'
region <- 'GLOBAL'
region_pc_scores <- read.table(gzfile('pca/with_outliers/scores/GLOBAL_scores_with_outliers.txt.bgz'), header=T)
outlier_status <- 'with_outliers'
region <- 'GLOBAL'
region_pc_scores <- read.table(gzfile('~/Desktop/Broad/alicia/HGDP_TGP/hgdp_tgp/pca/with_outliers/scores/, header=T)
outlier_status <- 'with_outliers'
region <- 'GLOBAL'
region_pc_scores <- read.table(gzfile('~/Desktop/Broad/alicia/HGDP_TGP/hgdp_tgp/pca/with_outliers/scores/GLOBAL_scores_with_outliers.txt.bgz, header=T)
outlier_status <- 'with_outliers'
region <- 'GLOBAL'
region_pc_scores <- read.table(gzfile('~/Desktop/Broad/alicia/HGDP_TGP/hgdp_tgp/pca/with_outliers/scores/GLOBAL_scores_with_outliers.txt.bgz', header=T)
outlier_status <- 'with_outliers'
region <- 'GLOBAL'
region_pc_scores <- read.table(gzfile('~/Desktop/Broad/alicia/HGDP_TGP/hgdp_tgp/pca/with_outliers/scores/GLOBAL_scores_with_outliers.txt.bgz'), header=T)
View(region_pc_scores)
outlier_status <- 'with_outliers'
region <- 'GLOBAL'
region_pc_scores <- read.table(gzfile('~/Desktop/Broad/alicia/HGDP_TGP/hgdp_tgp/pca/with_outliers/scores/GLOBAL_scores_with_outliers.txt.bgz'), header=T)
region_pc_scores2 <- read.table(gzfile('~/Desktop/Broad/alicia/HGDP_TGP/hgdp_tgp/pca/without_outliers/scores/GLOBAL_scores_without_outliers.txt.bgz'), header=T)
# function to plot a single [simple] PCA plot
single_pca_plot <- function(region = c('GLOBAL', 'AFR', 'EUR', 'AMR', 'EAS', 'CSA', 'OCE', 'MID'),
pc_scores,
which_pc1,
which_pc2,
bottom=F){
pc_scores <- na.omit(pc_scores) # remove possible NA values - # CHMI_CHMI3_WGS2 has no info in metadata so treated as an outlier
# plot specifics
pca_plot <- ggplot(aes=(text='s')) +
geom_point(size=2) +
theme_classic() +
labs(shape="Projects") +
theme(text = element_text(size=14, color='black'),
legend.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.key.size = unit(0.7, "lines")) +
guides(shape = guide_legend(override.aes = list(size = 0.85)))
if(bottom) {
pca_plot <- pca_plot +
theme(axis.text = element_text(color='black'),
legend.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.key.size = unit(0.7, "lines"),
legend.position="bottom") +
guides(fill=guide_legend(ncol=1,byrow=FALSE, title.position="top"),
shape=guide_legend(ncol=1,byrow=FALSE, title.position="top"))
}
# GLOBAL PCA
if (region == 'GLOBAL'){
# obtain region colors from the metadata for consistency across all plots
region_color <- unique(pc_scores[c("hgdp_tgp_meta.Genetic.region", "hgdp_tgp_meta.Continent.colors")]) %>% pull(hgdp_tgp_meta.Continent.colors, hgdp_tgp_meta.Genetic.region)
# add information to plot
pca_plot <- pca_plot +
geom_point(pc_scores, mapping = aes_string(x=which_pc1, y=which_pc2, color='hgdp_tgp_meta.Genetic.region', shape='project_meta.title')) +
scale_color_manual(values=region_color, name='Regions')
# SUBCONTINENTAL PCA
} else if (region %in% c('AFR', 'EUR', 'AMR', 'EAS', 'CSA', 'OCE', 'MID')) {
# assign colors to populations within each region
pop_count <- length(unique(pc_scores$hgdp_tgp_meta.Population))
pop_color <- colorRampPalette(brewer.pal(7, "Set1"))(pop_count)
# add information to plot
pca_plot <- pca_plot +
geom_point(pc_scores, mapping = aes_string(x=which_pc1, y=which_pc2, color='hgdp_tgp_meta.Population', shape='project_meta.title')) +
scale_color_manual(values=pop_color, name='Populations')
# in case user doesn't specify 'region' argument when running the function
} else{
print("Wrong entry for the 'region' argument. Please choose from the following options: 'GLOBAL', 'AFR', 'EUR', 'AMR', 'EAS', 'CSA', 'OCE', or 'MID'")
}
return(pca_plot)
}
knitr::opts_chunk$set(echo = TRUE)
# import needed libraries
library(tidyverse)
library(RColorBrewer)
library(plotly)
library(cowplot)
library(grid)
library(gridExtra)
# function to plot a single [simple] PCA plot
single_pca_plot <- function(region = c('GLOBAL', 'AFR', 'EUR', 'AMR', 'EAS', 'CSA', 'OCE', 'MID'),
pc_scores,
which_pc1,
which_pc2,
bottom=F){
pc_scores <- na.omit(pc_scores) # remove possible NA values - # CHMI_CHMI3_WGS2 has no info in metadata so treated as an outlier
# plot specifics
pca_plot <- ggplot(aes=(text='s')) +
geom_point(size=2) +
theme_classic() +
labs(shape="Projects") +
theme(text = element_text(size=14, color='black'),
legend.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.key.size = unit(0.7, "lines")) +
guides(shape = guide_legend(override.aes = list(size = 0.85)))
if(bottom) {
pca_plot <- pca_plot +
theme(axis.text = element_text(color='black'),
legend.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.key.size = unit(0.7, "lines"),
legend.position="bottom") +
guides(fill=guide_legend(ncol=1,byrow=FALSE, title.position="top"),
shape=guide_legend(ncol=1,byrow=FALSE, title.position="top"))
}
# GLOBAL PCA
if (region == 'GLOBAL'){
# obtain region colors from the metadata for consistency across all plots
region_color <- unique(pc_scores[c("hgdp_tgp_meta.Genetic.region", "hgdp_tgp_meta.Continent.colors")]) %>% pull(hgdp_tgp_meta.Continent.colors, hgdp_tgp_meta.Genetic.region)
# add information to plot
pca_plot <- pca_plot +
geom_point(pc_scores, mapping = aes_string(x=which_pc1, y=which_pc2, color='hgdp_tgp_meta.Genetic.region', shape='project_meta.title')) +
scale_color_manual(values=region_color, name='Regions')
# SUBCONTINENTAL PCA
} else if (region %in% c('AFR', 'EUR', 'AMR', 'EAS', 'CSA', 'OCE', 'MID')) {
# assign colors to populations within each region
pop_count <- length(unique(pc_scores$hgdp_tgp_meta.Population))
pop_color <- colorRampPalette(brewer.pal(7, "Set1"))(pop_count)
# add information to plot
pca_plot <- pca_plot +
geom_point(pc_scores, mapping = aes_string(x=which_pc1, y=which_pc2, color='hgdp_tgp_meta.Population', shape='project_meta.title')) +
scale_color_manual(values=pop_color, name='Populations')
# in case user doesn't specify 'region' argument when running the function
} else{
print("Wrong entry for the 'region' argument. Please choose from the following options: 'GLOBAL', 'AFR', 'EUR', 'AMR', 'EAS', 'CSA', 'OCE', or 'MID'")
}
return(pca_plot)
}
pca_plots_in_grid <- function(region, outlier_status){
# make sure the string entries are in the right format
region <- toupper(region)
outlier_status <- tolower(outlier_status)
# read-in pc scores to plot
region_pc_scores <- read.table(gzfile(paste0('pca/', outlier_status, '/scores/', region, '_scores_', outlier_status, '.txt.bgz')), header=T)
# read-in gnomAD metadata and select desired columns
hgdp_tgp_metadata <- read.delim('~/Desktop/Broad/alicia/pca_subcont/gnomad_meta_v1.tsv', header=T, sep='\t') %>% select(s, project_meta.title, starts_with('hgdp_tgp_meta'))
# some sample IDs have 'v3.1::' prefix as done in gnomAD so stripping that in order to match correctly with the pc score files
hgdp_tgp_metadata$s <- gsub('v3.1::', '', hgdp_tgp_metadata$s)
# join scores and metadata to add additional sample info
pc_scores_meta <- region_pc_scores %>% left_join(hgdp_tgp_metadata) %>% arrange(hgdp_tgp_meta.Population)
# plot
pca_1_2 <- single_pca_plot(region, pc_scores_meta, 'PC1', 'PC2')
pca_1_2_bottom <- single_pca_plot(region, pc_scores_meta, 'PC1', 'PC2', TRUE)
pca_3_4 <- single_pca_plot(region, pc_scores_meta, 'PC3', 'PC4')
pca_5_6 <- single_pca_plot(region, pc_scores_meta, 'PC5', 'PC6')
pca_7_8 <- single_pca_plot(region, pc_scores_meta, 'PC7', 'PC8')
all_pca <- plot_grid(pca_1_2 + theme(legend.position="none"), pca_3_4 + theme(legend.position="none"), pca_5_6 + theme(legend.position="none"), pca_7_8 + theme(legend.position="none"), nrow=1) # put all 4 plots together
legend <- get_legend(pca_1_2)
all_pca_add_legend <- plot_grid(all_pca, legend, rel_widths = c(4.8, 1)) # add legend
all_pca_add_title <- arrangeGrob(all_pca_add_legend, top=textGrob(region, x = 0, hjust = 0)) # add title
# save plots in grid as pdf
ggsave(paste0('pca/', outlier_status, '/plots/', region, '_pca_1to8_', outlier_status, '.pdf'), all_pca_add_title, width=15, height=4)
return(list(all_pca_add_title, pca_1_2_bottom))
}
# GLOBAL PCA
GLOBAL_pca <- pca_plots_in_grid('global', 'with_outliers')
# GLOBAL PCA
GLOBAL_pca <- pca_plots_in_grid('global', 'without_outliers')
